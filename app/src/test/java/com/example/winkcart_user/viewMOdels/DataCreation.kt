package com.example.winkcart_user.viewMOdels

import com.example.winkcart_user.data.model.orders.Address
import com.example.winkcart_user.data.model.orders.Customer
import com.example.winkcart_user.data.model.orders.CustomerAddress
import com.example.winkcart_user.data.model.orders.Money
import com.example.winkcart_user.data.model.orders.MoneySet
import com.example.winkcart_user.data.model.orders.Order
import com.example.winkcart_user.data.model.orders.OrderDetailsResponse
import com.example.winkcart_user.data.model.orders.OrdersResponse
import java.util.Date
fun createFakeOrderDetailsResponse(
    createAt: String?,
    email: String,
    currency: String,
): OrderDetailsResponse {
    val moneySet = MoneySet(
        shopMoney = Money(amount = "100.0", currencyCode = currency),
        presentmentMoney = Money(amount = "100.0", currencyCode = currency)
    )

    val address = Address(
        address1 = "123 Street",
        address2 = null,
        phone = "1234567890",
        city = "Cairo",
        zip = "12345",
        province = "Giza",
        country = "Egypt",
        company = null,
        name = "John Doe",
        firstName = "John",
        lastName = "Doe",
        latitude = 30.0,
        longitude = 31.0,
        countryCode = "EG",
        provinceCode = "GZ"
    )
    val customAddress = CustomerAddress(
        address1 = "123 Street",
        address2 = null,
        phone = "1234567890",
        city = "Cairo",
        zip = "12345",
        province = "Giza",
        country = "Egypt",
        company = null,
        name = "John Doe",
        firstName = "John",
        lastName = "Doe",
        countryCode = "EG",
        provinceCode = "GZ",
        id = 11,
        customerId = 11,
        countryName = "",
        default = true
    )

    val order = Order(
        id = 1L,
        cancelledAt = null,
        contactEmail = "john@example.com",
        createdAt = createAt ?: "",
        currency = currency,
        currentSubtotalPrice = "100.0",
        currentSubtotalPriceSet = moneySet,
        currentTotalAdditionalFeesSet = null,
        currentTotalDiscounts = "0.0",
        currentTotalDiscountsSet = moneySet,
        currentTotalDutiesSet = null,
        currentTotalPrice = "100.0",
        currentTotalPriceSet = moneySet,
        currentTotalTax = "10.0",
        currentTotalTaxSet = moneySet,
        discountCodes = emptyList(),
        dutiesIncluded = false,
        email = email,
        estimatedTaxes = false,
        financialStatus = "paid",
        fulfillmentStatus = null,
        landingSite = null,
        landingSiteRef = null,
        locationId = null,
        merchantBusinessEntityId = "xyz",
        merchantOfRecordAppId = null,
        name = "#1001",
        note = null,
        noteAttributes = emptyList(),
        number = 1001,
        orderNumber = 1001,
        orderStatusUrl = "http://example.com/status",
        originalTotalAdditionalFeesSet = null,
        originalTotalDutiesSet = null,
        paymentGatewayNames = listOf("visa"),
        phone = "1234567890",
        poNumber = null,
        presentmentCurrency = "USD",
        processedAt = Date(),
        reference = null,
        referringSite = null,
        sourceIdentifier = null,
        sourceName = "web",
        sourceUrl = null,
        subtotalPrice = "90.0",
        subtotalPriceSet = moneySet,
        tags = "",
        taxExempt = false,
        taxLines = emptyList(),
        taxesIncluded = true,
        test = false,
        token = "token123",
        totalCashRoundingPaymentAdjustmentSet = moneySet,
        totalCashRoundingRefundAdjustmentSet = moneySet,
        totalDiscounts = "0.0",
        totalDiscountsSet = moneySet,
        totalLineItemsPrice = "90.0",
        totalLineItemsPriceSet = moneySet,
        totalOutstanding = "0.0",
        totalPrice = "100.0",
        totalPriceSet = moneySet,
        totalShippingPriceSet = moneySet,
        totalTax = "10.0",
        totalTaxSet = moneySet,
        totalTipReceived = "0.0",
        totalWeight = 0,
        updatedAt = Date(),
        userId = 1,
        billingAddress = address,
        customer = Customer(
            id = 1,
            email = "john@example.com",
            firstName = "John",
            lastName = "Doe",
            createdAt = Date(),
            updatedAt = Date(),
            state = "active",
            note = null,
            verifiedEmail = true,
            multipassIdentifier = null,
            taxExempt = false,
            phone = "1234567890",
            tags = "",
            currency = "USD",
            taxExemptions = emptyList(),
            adminGraphqlApiId = "gid://shopify/Customer/1",
            defaultAddress = customAddress
        ),
        discountApplications = emptyList(),
        fulfillments = emptyList(),
        lineItems = emptyList(),
        shippingAddress = address
    )

    return OrderDetailsResponse(order)
}

fun createFakeGetOrderResponse(
    createAt: String?,
    email: String,
    currency: String,
): OrdersResponse {
    val moneySet = MoneySet(
        shopMoney = Money(amount = "100.0", currencyCode = currency),
        presentmentMoney = Money(amount = "100.0", currencyCode = currency)
    )

    val address = Address(
        address1 = "123 Street",
        address2 = null,
        phone = "1234567890",
        city = "Cairo",
        zip = "12345",
        province = "Giza",
        country = "Egypt",
        company = null,
        name = "John Doe",
        firstName = "John",
        lastName = "Doe",
        latitude = 30.0,
        longitude = 31.0,
        countryCode = "EG",
        provinceCode = "GZ"
    )
    val customAddress = CustomerAddress(
        address1 = "123 Street",
        address2 = null,
        phone = "1234567890",
        city = "Cairo",
        zip = "12345",
        province = "Giza",
        country = "Egypt",
        company = null,
        name = "John Doe",
        firstName = "John",
        lastName = "Doe",
        countryCode = "EG",
        provinceCode = "GZ",
        id = 11,
        customerId = 11,
        countryName = "",
        default = true
    )

    val order = Order(
        id = 1L,
        cancelledAt = null,
        contactEmail = "john@example.com",
        createdAt = createAt ?: "",
        currency = currency,
        currentSubtotalPrice = "100.0",
        currentSubtotalPriceSet = moneySet,
        currentTotalAdditionalFeesSet = null,
        currentTotalDiscounts = "0.0",
        currentTotalDiscountsSet = moneySet,
        currentTotalDutiesSet = null,
        currentTotalPrice = "100.0",
        currentTotalPriceSet = moneySet,
        currentTotalTax = "10.0",
        currentTotalTaxSet = moneySet,
        discountCodes = emptyList(),
        dutiesIncluded = false,
        email = email,
        estimatedTaxes = false,
        financialStatus = "paid",
        fulfillmentStatus = null,
        landingSite = null,
        landingSiteRef = null,
        locationId = null,
        merchantBusinessEntityId = "xyz",
        merchantOfRecordAppId = null,
        name = "#1001",
        note = null,
        noteAttributes = emptyList(),
        number = 1001,
        orderNumber = 1001,
        orderStatusUrl = "http://example.com/status",
        originalTotalAdditionalFeesSet = null,
        originalTotalDutiesSet = null,
        paymentGatewayNames = listOf("visa"),
        phone = "1234567890",
        poNumber = null,
        presentmentCurrency = "USD",
        processedAt = Date(),
        reference = null,
        referringSite = null,
        sourceIdentifier = null,
        sourceName = "web",
        sourceUrl = null,
        subtotalPrice = "90.0",
        subtotalPriceSet = moneySet,
        tags = "",
        taxExempt = false,
        taxLines = emptyList(),
        taxesIncluded = true,
        test = false,
        token = "token123",
        totalCashRoundingPaymentAdjustmentSet = moneySet,
        totalCashRoundingRefundAdjustmentSet = moneySet,
        totalDiscounts = "0.0",
        totalDiscountsSet = moneySet,
        totalLineItemsPrice = "90.0",
        totalLineItemsPriceSet = moneySet,
        totalOutstanding = "0.0",
        totalPrice = "100.0",
        totalPriceSet = moneySet,
        totalShippingPriceSet = moneySet,
        totalTax = "10.0",
        totalTaxSet = moneySet,
        totalTipReceived = "0.0",
        totalWeight = 0,
        updatedAt = Date(),
        userId = 1,
        billingAddress = address,
        customer = Customer(
            id = 1,
            email = "john@example.com",
            firstName = "John",
            lastName = "Doe",
            createdAt = Date(),
            updatedAt = Date(),
            state = "active",
            note = null,
            verifiedEmail = true,
            multipassIdentifier = null,
            taxExempt = false,
            phone = "1234567890",
            tags = "",
            currency = "USD",
            taxExemptions = emptyList(),
            adminGraphqlApiId = "gid://shopify/Customer/1",
            defaultAddress = customAddress
        ),
        discountApplications = emptyList(),
        fulfillments = emptyList(),
        lineItems = emptyList(),
        shippingAddress = address
    )

    val orders = listOf(order)
    return OrdersResponse(orders)
}


fun createFakeOrder(
    createdAt: String = "2025-06-01T12:00:00",
    email: String = "john@example.com",
    currency: String = "USD",
    id: Long = 1L,
): Order {
    val moneySet = MoneySet(
        shopMoney = Money(amount = "100.0", currencyCode = currency),
        presentmentMoney = Money(amount = "100.0", currencyCode = currency)
    )

    val address = Address(
        address1 = "123 Street",
        address2 = null,
        phone = "1234567890",
        city = "Cairo",
        zip = "12345",
        province = "Giza",
        country = "Egypt",
        company = null,
        name = "John Doe",
        firstName = "John",
        lastName = "Doe",
        latitude = 30.0,
        longitude = 31.0,
        countryCode = "EG",
        provinceCode = "GZ"
    )

    val customerAddress = CustomerAddress(
        address1 = "123 Street",
        address2 = null,
        phone = "1234567890",
        city = "Cairo",
        zip = "12345",
        province = "Giza",
        country = "Egypt",
        company = null,
        name = "John Doe",
        firstName = "John",
        lastName = "Doe",
        countryCode = "EG",
        provinceCode = "GZ",
        id = 11,
        customerId = 11,
        countryName = "",
        default = true
    )

    val customer = Customer(
        id = 1,
        email = email,
        firstName = "John",
        lastName = "Doe",
        createdAt = Date(),
        updatedAt = Date(),
        state = "active",
        note = null,
        verifiedEmail = true,
        multipassIdentifier = null,
        taxExempt = false,
        phone = "1234567890",
        tags = "",
        currency = currency,
        taxExemptions = emptyList(),
        adminGraphqlApiId = "gid://shopify/Customer/1",
        defaultAddress = customerAddress
    )

    return Order(
        id = id,
        cancelledAt = null,
        contactEmail = email,
        createdAt = createdAt,
        currency = currency,
        currentSubtotalPrice = "100.0",
        currentSubtotalPriceSet = moneySet,
        currentTotalAdditionalFeesSet = null,
        currentTotalDiscounts = "0.0",
        currentTotalDiscountsSet = moneySet,
        currentTotalDutiesSet = null,
        currentTotalPrice = "100.0",
        currentTotalPriceSet = moneySet,
        currentTotalTax = "10.0",
        currentTotalTaxSet = moneySet,
        discountCodes = emptyList(),
        dutiesIncluded = false,
        email = email,
        estimatedTaxes = false,
        financialStatus = "paid",
        fulfillmentStatus = null,
        landingSite = null,
        landingSiteRef = null,
        locationId = null,
        merchantBusinessEntityId = "xyz",
        merchantOfRecordAppId = null,
        name = "#1001",
        note = null,
        noteAttributes = emptyList(),
        number = 1001,
        orderNumber = 1001,
        orderStatusUrl = "http://example.com/status",
        originalTotalAdditionalFeesSet = null,
        originalTotalDutiesSet = null,
        paymentGatewayNames = listOf("visa"),
        phone = "1234567890",
        poNumber = null,
        presentmentCurrency = currency,
        processedAt = Date(),
        reference = null,
        referringSite = null,
        sourceIdentifier = null,
        sourceName = "web",
        sourceUrl = null,
        subtotalPrice = "90.0",
        subtotalPriceSet = moneySet,
        tags = "",
        taxExempt = false,
        taxLines = emptyList(),
        taxesIncluded = true,
        test = false,
        token = "token123",
        totalCashRoundingPaymentAdjustmentSet = moneySet,
        totalCashRoundingRefundAdjustmentSet = moneySet,
        totalDiscounts = "0.0",
        totalDiscountsSet = moneySet,
        totalLineItemsPrice = "90.0",
        totalLineItemsPriceSet = moneySet,
        totalOutstanding = "0.0",
        totalPrice = "100.0",
        totalPriceSet = moneySet,
        totalShippingPriceSet = moneySet,
        totalTax = "10.0",
        totalTaxSet = moneySet,
        totalTipReceived = "0.0",
        totalWeight = 0,
        updatedAt = Date(),
        userId = 1,
        billingAddress = address,
        customer = customer,
        discountApplications = emptyList(),
        fulfillments = emptyList(),
        lineItems = emptyList(),
        shippingAddress = address
    )
}
